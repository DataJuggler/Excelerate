<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net5.0</TargetFramework>
    <PackageRequireLicenseAcceptance>false</PackageRequireLicenseAcceptance>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <Authors>DataJuggler</Authors>
    <Description>Excelerate uses EPPPlus version 4.5.3.3 (last free version), and it makes it easy to load Workbooks or Worksheets. Excelerate now has a code generation feature, you can create a C# class from a header row.

I have a couple of clients that I build programs that automate combining columns from multiple Worksheets to form reports.

Rather than continue to write custom loaders, I really only need custom Exporters in most cases, so I created this project.</Description>
    <Copyright>2021 - Use for whatever you want, give me credit if you like it.</Copyright>
    <PackageProjectUrl>https://github.com/DataJuggler/Excelerate</PackageProjectUrl>
    <PackageLicenseFile>LICENSE</PackageLicenseFile>
    <RepositoryUrl>https://github.com/DataJuggler/Excelerate.git</RepositoryUrl>
    <RepositoryType>Git / Git Hub</RepositoryType>
    <PackageTags>EPPPlus Excel C#</PackageTags>
    <PackageReleaseNotes>10.13.2021: New override for GetSheetNames takes a path argument.
I am working on a new Blazor project called Blazor.Excelerate to demo this project.

9.21.2021
Version 1.1.5:
I created an ExcelHelper class because I needed the GetColumnLetter feature of ExcelCellAddress.

9.20.2021
Version 1.1.4:
I updated ExcelDataLoader to havea  LoadPackage method.

9.20.2021:
Version 1.1.3:
I added an OriginalFileName property to class Column, so the exported column header can be the same as the original.

9.17.2021
Version 1.1.2:
The Code Generator class is now finished, and a Load method has been updated to test for
a null row or null row.Columns just to be safer.

More updates may come in the future, but for now I have completed what I started this project for.
For the amount of effort I put into this, I think the return on investment is quite satisfactory as
now I can build Excel projects much faster. 

9.17.2021
Version 1.1.1: I now code generate a Load method with the Code Generator, so a Row can be used to load an instance of the class created. This is still being tested.

9.15.2021
Version 1.0.3: I added a LoadWorksheet override, so clients do not have to load a Workbook to get
to a single worksheet.

This is the first release. I have just begun adding classes and helper methods to this. It does work for now to load a worksheet and all the Rows / Columns. Each column is loaded as an object ColumnValue, than properties exist that cast the ColumnValue as a bool, datetime, Decimal or other types.</PackageReleaseNotes>
    <Version>1.1.6</Version>
  </PropertyGroup>

  <ItemGroup>
    <Compile Remove="Sample\**" />
    <EmbeddedResource Remove="Sample\**" />
    <None Remove="Sample\**" />
    <None Include="LICENSE">
      <Pack>True</Pack>
      <PackagePath></PackagePath>
    </None>
  </ItemGroup>

  <ItemGroup>
    <None Include="ExcelerateEnumerations.cs" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="DataJuggler.Net5" Version="3.0.6" />
    <PackageReference Include="DataJuggler.UltimateHelper" Version="1.6.7" />
    <PackageReference Include="EPPlus" Version="4.5.3.3" />
  </ItemGroup>

</Project>
